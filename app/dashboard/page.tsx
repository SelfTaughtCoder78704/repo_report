"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { api } from "@/convex/_generated/api";
import { useQuery, useAction } from "convex/react";
import {
  GitHubLogoIcon,
  CheckIcon,
  CaretSortIcon,
} from "@radix-ui/react-icons";
import { Skeleton } from "@/components/ui/skeleton";
import { SignedIn, SignedOut, RedirectToSignIn } from "@clerk/nextjs";
import { useState } from "react";
import { useUser } from "@clerk/nextjs";
import { Id } from "@/convex/_generated/dataModel";
import { cn } from "@/lib/utils";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import Link from "next/link";
import { useToast } from "@/hooks/use-toast";

interface Repository {
  _id: Id<"repositories">;
  name: string;
  owner: string;
  installationId: number;
  webhookId?: string;
  description?: string;
  createdBy?: string;
}

interface PullRequest {
  _id: Id<"pullRequests">;
  prNumber: number;
  title: string;
  author: string;
  state: string;
  createdAt: number;
  updatedAt: number;
  closedAt?: number;
  mergedAt?: number;
  htmlUrl: string;
  diffUrl: string;
  changedFiles?: number;
  additions?: number;
  deletions?: number;
  commitCount?: number;
}

function PRSummary({ pr }: { pr: PullRequest }) {
  const { user } = useUser();
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const summary = useQuery(api.prSummaries.getPRSummary, {
    pullRequestId: pr._id,
  });
  const summarize = useAction(api.summarize.summarizePR);

  const handleGenerateSummary = async () => {
    if (!user?.id) return;
    setIsGenerating(true);
    try {
      await summarize({
        userId: user.id,
        pullRequestId: pr._id,
      });
      toast({
        title: "Summary Generated",
        description: "The PR summary has been generated successfully.",
      });
    } catch (error) {
      toast({
        title: "Error",
        description:
          error instanceof Error ? error.message : "Failed to generate summary",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className="mt-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">Summary</h3>
        {!summary && (
          <Button
            variant="outline"
            size="sm"
            onClick={handleGenerateSummary}
            disabled={isGenerating}
          >
            {isGenerating ? "Generating..." : "Generate Summary"}
          </Button>
        )}
      </div>
      {summary ? (
        <Card className="mt-2">
          <CardContent className="pt-4">
            <p className="whitespace-pre-wrap">{summary.summary}</p>
            <div className="mt-2 text-sm text-muted-foreground">
              Generated by {summary.provider} ({summary.model})
            </div>
          </CardContent>
        </Card>
      ) : (
        <p className="mt-2 text-sm text-muted-foreground">
          No summary available yet.
        </p>
      )}
    </div>
  );
}

function PullRequestList({
  repositoryId,
}: {
  repositoryId: Id<"repositories">;
}) {
  const prs = useQuery(api.pullRequests.listRepositoryPRs, { repositoryId });

  if (!prs?.length) {
    return (
      <div className="text-center py-4 text-muted-foreground">
        No pull requests found.
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {prs.map((pr) => (
        <Card key={pr._id}>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <a
                href={pr.htmlUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="hover:underline"
              >
                {pr.title}
              </a>
              <span
                className={cn(
                  "text-sm px-2 py-1 rounded-full",
                  pr.state === "open"
                    ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-100"
                    : "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-100"
                )}
              >
                {pr.state}
              </span>
            </CardTitle>
            <CardDescription>
              <div className="flex items-center gap-4">
                <span>#{pr.prNumber}</span>
                <span>by {pr.author}</span>
                <span>{new Date(pr.createdAt).toLocaleDateString()}</span>
              </div>
              <div className="mt-2 flex items-center gap-4 text-sm">
                <span>{pr.changedFiles} files</span>
                <span className="text-green-600">+{pr.additions}</span>
                <span className="text-red-600">-{pr.deletions}</span>
                <span>{pr.commitCount} commits</span>
              </div>
            </CardDescription>
          </CardHeader>
          <CardContent>
            <PRSummary pr={pr} />
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

function RepositorySelector({
  repositories,
  selectedRepo,
  onSelect,
}: {
  repositories: Repository[];
  selectedRepo: Repository | null;
  onSelect: (repo: Repository | null) => void;
}) {
  const [open, setOpen] = useState(false);
  const [search, setSearch] = useState("");

  const filteredRepos = repositories.filter((repo) =>
    `${repo.owner}/${repo.name}`.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between"
        >
          {selectedRepo
            ? `${selectedRepo.owner}/${selectedRepo.name}`
            : "Select a repository..."}
          <CaretSortIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-2" align="start">
        <div className="flex flex-col space-y-2">
          <input
            className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            placeholder="Search repositories..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
          />
          <div className="max-h-[300px] overflow-y-auto">
            {filteredRepos.length === 0 ? (
              <div className="py-6 text-center text-sm text-muted-foreground">
                No repositories found.
              </div>
            ) : (
              filteredRepos.map((repo) => (
                <Button
                  key={repo._id}
                  variant="ghost"
                  className="w-full justify-start gap-2"
                  onClick={() => {
                    onSelect(selectedRepo?._id === repo._id ? null : repo);
                    setOpen(false);
                  }}
                >
                  <CheckIcon
                    className={cn(
                      "h-4 w-4",
                      selectedRepo?._id === repo._id
                        ? "opacity-100"
                        : "opacity-0"
                    )}
                  />
                  <span>
                    {repo.owner}/{repo.name}
                  </span>
                </Button>
              ))
            )}
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
}

function RepositoryCard({ repo }: { repo: Repository }) {
  const [isConfiguring, setIsConfiguring] = useState(false);
  const setupWebhook = useAction(api.github.setupRepositoryWebhooks);

  const handleSetupWebhook = async (e: React.MouseEvent) => {
    e.stopPropagation();
    try {
      setIsConfiguring(true);
      await setupWebhook({ repositoryId: repo._id });
    } catch (error) {
      console.error("Error setting up webhook:", error);
      alert("Failed to set up webhook. Please try again.");
    } finally {
      setIsConfiguring(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{`${repo.owner}/${repo.name}`}</CardTitle>
        <CardDescription>
          Installation ID: {repo.installationId}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex justify-between items-center mb-4">
          <div>
            <p>
              Webhook Status:{" "}
              {repo.webhookId ? (
                <span className="text-green-600">Configured</span>
              ) : (
                <span className="text-yellow-600">Not Configured</span>
              )}
            </p>
          </div>
          {!repo.webhookId && (
            <Button onClick={handleSetupWebhook} disabled={isConfiguring}>
              {isConfiguring ? "Configuring..." : "Configure Webhook"}
            </Button>
          )}
        </div>
        {repo.webhookId && (
          <div className="mt-4">
            <h3 className="text-lg font-semibold mb-2">Pull Requests</h3>
            <PullRequestList repositoryId={repo._id} />
          </div>
        )}
      </CardContent>
    </Card>
  );
}

function DashboardContent() {
  const { user, isLoaded } = useUser();
  const repositories = useQuery(api.repos.listUserRepositories) as
    | Repository[]
    | undefined;
  const [selectedRepo, setSelectedRepo] = useState<Repository | null>(null);

  if (!isLoaded || !user) {
    return <Skeleton className="h-[200px] w-full" />;
  }

  const redirectUri =
    typeof window !== "undefined"
      ? `${window.location.origin}/dashboard`
      : "http://localhost:3000/dashboard";
  const installUrl = `https://github.com/apps/ai-repo-report/installations/new?redirect_uri=${encodeURIComponent(redirectUri)}`;

  return (
    <div className="h-full">
      <div className="container mx-auto h-full py-8">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold">Repositories</h1>
            <p className="text-muted-foreground">
              Manage your connected GitHub repositories
            </p>
          </div>
          <Link href="/settings">
            <Button variant="outline">Settings</Button>
          </Link>
        </div>

        <div className="space-y-4">
          {repositories?.length === 0 ? (
            <Card>
              <CardHeader>
                <CardTitle>No repositories connected</CardTitle>
                <CardDescription>
                  Install the GitHub App to get started
                </CardDescription>
              </CardHeader>
              <CardContent>
                <Button asChild>
                  <a href={installUrl} className="flex items-center">
                    <GitHubLogoIcon className="mr-2 h-4 w-4" />
                    Install GitHub App
                  </a>
                </Button>
              </CardContent>
            </Card>
          ) : repositories ? (
            <>
              <div className="w-full max-w-2xl">
                <RepositorySelector
                  repositories={repositories}
                  selectedRepo={selectedRepo}
                  onSelect={setSelectedRepo}
                />
              </div>
              {selectedRepo && <RepositoryCard repo={selectedRepo} />}
            </>
          ) : (
            <Skeleton className="h-[200px] w-full" />
          )}
        </div>
      </div>
    </div>
  );
}

export default function DashboardPage() {
  return (
    <div className="h-full">
      <SignedIn>
        <DashboardContent />
      </SignedIn>
      <SignedOut>
        <RedirectToSignIn />
      </SignedOut>
    </div>
  );
}
